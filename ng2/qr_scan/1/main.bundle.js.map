{"version":3,"sources":["/home/kalinin/angular2/PRACTICE2/qr-scan/src/$_lazy_route_resource lazy","/home/kalinin/angular2/PRACTICE2/qr-scan/src/app/app.component.css","/home/kalinin/angular2/PRACTICE2/qr-scan/src/app/app.component.html","/home/kalinin/angular2/PRACTICE2/qr-scan/src/app/app.component.ts","/home/kalinin/angular2/PRACTICE2/qr-scan/src/app/app.module.ts","/home/kalinin/angular2/PRACTICE2/qr-scan/src/environments/environment.ts","/home/kalinin/angular2/PRACTICE2/qr-scan/src/main.ts"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,yF;;;;;;;ACVA;AACA;;;AAGA;AACA,iCAAkC,eAAe,GAAG;;AAEpD;;;AAGA;AACA,2C;;;;;;;ACXA,+0BAA+0B,iBAAiB,U;;;;;;;;;;;;;;;;ACAtzB;AAO1C;IAAA;IAUA,CAAC;IANA,oCAAa,GAAb,UAAc,EAAE;QACf,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAChB,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1B,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;IAClB,CAAC;IARW,YAAY;QALxB,gEAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;OACW,YAAY,CAUxB;IAAD,mBAAC;CAAA;AAVwB;;;;;;;;;;;;;;;;;;;;;ACPiC;AACjB;AAEY;AAEN;AAc/C;IAAA;IAAyB,CAAC;IAAb,SAAS;QAXrB,+DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,oEAAY;aACb;YACD,OAAO,EAAE;gBACR,mEAAe;gBACd,gFAAa;aACd;YACD,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,oEAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;ACnBtB;AAAA,mFAAmF;AACnF,8FAA8F;AAC9F,yEAAyE;AACzE,gFAAgF;AAEzE,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;;;;;;;;;;;;;;ACP6C;AAC4B;AAE9B;AACY;AAEzD,EAAE,CAAC,CAAC,8EAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,qEAAc,EAAE,CAAC;AACnB,CAAC;AAED,yGAAsB,EAAE,CAAC,eAAe,CAAC,kEAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC","file":"main.bundle.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"../../../../../src/$$_lazy_route_resource lazy recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/kalinin/angular2/PRACTICE2/qr-scan/src/$$_lazy_route_resource lazy\n// module id = ../../../../../src/$$_lazy_route_resource lazy recursive\n// module chunks = main","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".result{\\n\\tcolor: red;\\n}\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/kalinin/angular2/PRACTICE2/qr-scan/src/app/app.component.css\n// module id = ../../../../../src/app/app.component.css\n// module chunks = main","module.exports = \"<!--\\nComponent attributes\\n[debug]         debug flag for console.log spam              (default: false)\\n[canvasWidth]   canvas width                                 (default: 640)\\n[canvasHeight]  canvas height                                (default: 480)\\n[mirror]        should the image be a mirror?                (default: false)\\n[stopAfterScan] should the scanner stop after first success? (default: true)\\n[updateTime]    miliseconds between new capture              (default: 500)\\n(onRead)        callback when qr code is detected\\n-->\\n<qr-scanner    \\n   [debug]=\\\"false\\\"        \\n   [canvasWidth]=\\\"640\\\"    \\n   [canvasHeight]=\\\"480\\\"   \\n   [mirror]=\\\"false\\\"       \\n   [stopAfterScan]=\\\"true\\\" \\n   [updateTime]=\\\"500\\\"     \\n   (onRead)=\\\"decodedOutput($event)\\\"></qr-scanner>\\n\\n\\n<div class=\\\"result\\\">{{ result | json }}</div>   \"\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/kalinin/angular2/PRACTICE2/qr-scan/src/app/app.component.html\n// module id = ../../../../../src/app/app.component.html\n// module chunks = main","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n\tresult: string;\n  \n\tdecodedOutput(ev) {\n\t\tconsole.log(ev);\n\t\talert(JSON.stringify(ev));\n\t\tthis.result = ev;\n\t}\n\n}\n\n\n\n// WEBPACK FOOTER //\n// /home/kalinin/angular2/PRACTICE2/qr-scan/src/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { QrScannerModule } from 'angular2-qrscanner';\n\nimport { AppComponent } from './app.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n  \tQrScannerModule,\n    BrowserModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// /home/kalinin/angular2/PRACTICE2/qr-scan/src/app/app.module.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// /home/kalinin/angular2/PRACTICE2/qr-scan/src/environments/environment.ts","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n\n\n\n// WEBPACK FOOTER //\n// /home/kalinin/angular2/PRACTICE2/qr-scan/src/main.ts"],"sourceRoot":"webpack:///"}